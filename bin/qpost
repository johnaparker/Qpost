#!/usr/bin/env python3

import argparse
import qpost

# parse input
parser = argparse.ArgumentParser(prog='qpost')
subparsers = parser.add_subparsers(help='sub-command help', dest="command")

flux_parser = subparsers.add_parser('flux', help='flux help')
video_parser = subparsers.add_parser('video', help='video help')
layout_parser = subparsers.add_parser('layout', help='layout help')

flux_parser.add_argument('h5file', type=str, help='HDF5 file')
flux_parser.add_argument('-name', nargs='*', type=str, help='Only use monitors matching a given name', default=None)
flux_parser.add_argument('-group', nargs='*', type=str, help='Only use monitors in a particular monitor group', default=None)
flux_parser.add_argument('-t', nargs='?', type=int, help='Timestep t', default = -1)
# flux_parser.add_argument('--anim', action='store_true', help='Flux animation')

video_parser.add_argument('h5file', type=str, help='HDF5 file')
video_parser.add_argument('dataset', type=str, help='Dataset inside HDF5 file to be used')
video_parser.add_argument('-t0', nargs='?', type=int, help='Start frame', default = 0)
video_parser.add_argument('-tf', nargs='?', type=int, help='End frame', default = -1)
video_parser.add_argument('-ms', nargs='?', type=int, help='Time between frames, in ms', default = 30)
video_parser.add_argument('-save', nargs='?', type=str, help='Save animation to output file', default = None)
video_parser.add_argument('-cores', nargs='?', type=int, help='', default = -1)
video_parser.add_argument('-R', action='store_true', help='Flag to normalize max/min across all images')
video_parser.add_argument('--monitors', action='store_true', help='Display monitors')
video_parser.add_argument('--objects', action='store_true', help='Display objects')

layout_parser.add_argument('h5file', type=str, help='HDF5 file')

args = parser.parse_args()

if args.command == "flux":
    qpost.viz.flux.make_flux_plot(args.h5file, args.group, args.name)
    
elif args.command == "video":
    qpost.viz.video.make_video(args.h5file, args.dataset, args.t0, args.tf, args.ms, args.save, norm=args.R, monitors=args.monitors, objects=args.objects)

elif args.command == "layout":
    qpost.viz.layout.make_layout(args.h5file)
