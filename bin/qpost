#!/usr/bin/env python3

import argparse
import qpost
import matplotlib.pyplot as plt
import h5py
print("Qpost is working!")

# parse input
parser = argparse.ArgumentParser(prog='qpost')
subparsers = parser.add_subparsers(help='sub-command help', dest="command")
parser_a = subparsers.add_parser('flux', help='flux help')
parser_b = subparsers.add_parser('video', help='video help')

parser_a.add_argument('h5file', type=str, help='HDF5 file to be used')
parser_a.add_argument('dataset', nargs='*', type=str, help='Dataset(s) inside HDF5 file to be used')
parser_a.add_argument('-t', nargs='?', type=int, help='Timestep t', default = -1)
parser_a.add_argument('--anim', action='store_true', help='Flux animation')

parser_b.add_argument('h5file', type=str, help='HDF5 file to be used')
parser_b.add_argument('dataset', type=str, help='Dataset inside HDF5 file to be used')
parser_b.add_argument('-t0', nargs='?', type=int, help='Start frame', default = 0)
parser_b.add_argument('-tf', nargs='?', type=int, help='End frame', default = -1)
parser_b.add_argument('-ms', nargs='?', type=int, help='Time between frames, in ms', default = 30)
parser_b.add_argument('-save', nargs='?', type=str, help='Save animation to output file', default = None)
parser_b.add_argument('-cores', nargs='?', type=int, help='', default = -1)
parser_b.add_argument('-R', action='store_true', help='Flag to normalize max/min across all images')
parser_b.add_argument('--monitors', action='store_true', help='Display monitors')

args = parser.parse_args()

if args.command == "flux":
    print("Flux calculation")
    # index = args.h5file.find(':')
    # h5file = args.h5file[:index]
    # dataname = args.h5file[index+1:]
    # flux = qpost.monitors.load_flux(h5file, dataname)
    if not args.dataset:
        with h5py.File(args.h5file, 'r') as h5file:
            for dset in h5file["Monitors"].keys():
                if (args.anim):
                    qpost.monitors.flux_video(args.h5file, "Monitors/{}".format(dset))
                else:
                    flux = qpost.monitors.load_flux(args.h5file, "Monitors/{}".format(dset), args.t)
                    plt.plot(flux, '.-', label=dset)
    else:
        for dataset in args.dataset:
            if (args.anim):
                qpost.monitors.flux_video(args.h5file, "Monitors/{}".format(dataset))
            else:
                flux = qpost.monitors.load_flux(args.h5file, dataset, args.t)
                plt.plot(flux, '.-', label=dataset)
    plt.legend()
    plt.show()
    
if args.command == "video":
    # qpost.video.make_video_other_parallel(args.h5file, args.dataset, args.t0, args.tf, args.ms, args.save, norm=args.R, cores=args.cores)
    qpost.video.make_video_other2(args.h5file, args.dataset, args.t0, args.tf, args.ms, args.save, norm=args.R, monitors=args.monitors)
